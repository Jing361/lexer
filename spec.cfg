program := statement*

variable_declaration := 'extern'?
                        type
                        identifier
                        initialization?
                        ';'

function_declaration := 'extern'?
                        type
                        identifier
                        '(' param_list ')'

type := qualifiers*
        typename
        pointer?

qualifiers := 'const'
            | 'volatile'
            | 'static'

typename := identifier

type_spec := 'typedef' identifier type ';'

pointer := '*'

identifier := non_digit_ident_char ident_char*

initialization := '=' value

param_list := param (',' param_list)?

param := type identifier

non_digit_ident_char := [a-zA-Z_]

ident_char := non_digit_ident_char
            | digit

digit := [0-9]

value := expression

function_definition := function_declaration
                       block

// function_declaration maybe shouldn't be considered a statement
// look at how statement is used, many situations should not include
// func decl
statement := function_declaration
           | variable_declaration
           | if_stmnt
           | for_loop
           | while_loop
           | type_spec

expression := '(' identifier '(' arg_list ')'
                | expression operator expression ')'

operator := '*' | '/' | '+' | '-' | '='

arg_list := arg (',' arg_list )?

arg := expression

if_stmnt := 'if(' expression ')' ( block | statement | expression ) ( 'else' if_stmnt? ( block | statement | expression ) )?

for_loop := 'for(' statement ';' expression ';' statement ')' ( block | statement | expression )

while_loop := 'while(' expression ')' ( block | statement | expression )

block := '{' ( statement | expression )* '}'

